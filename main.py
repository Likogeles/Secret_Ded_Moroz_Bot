import asyncio
import random

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import CommandStart

from config import TOKEN, mainUserId
from user import User
from userState import UserState
from users import UsersList

bot = Bot(token=TOKEN)
dp = Dispatcher()

usersList = UsersList()


commands = ["/info", "/start_game"]


async def new_user(user: User):
    usersList.addUser(user)
    await bot.send_message(mainUserId, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{getUserLink(user.getId(), user.getFirstName(), user.getSecondName())}", parse_mode=ParseMode.HTML)


def getUserLink(user_id, first_name, second_name) -> str:
    return f'<a href="tg://user?id={user_id}">{first_name} {second_name}</a>'


def shuffle_users():
    user_ids = []
    for i in usersList.getUsers():
        user_ids.append(i.getId())

    random.shuffle(user_ids)

    usersList.getUserById(user_ids[0]).setGiftUserId(user_ids[-1])
    for i in range(1, len(user_ids)):
        usersList.getUserById(user_ids[i]).setGiftUserId(user_ids[i-1])


@dp.message(CommandStart())
async def process_start_command(msg: Message):
    if not usersList.getUserById(msg.from_user.id):
        await new_user(User(msg.from_user.id, msg.from_user.first_name, msg.from_user.last_name, "UserState.setName"))
        await bot.send_message(msg.from_user.id, "–ü—Ä–∏–≤–µ—Ç –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞–π–Ω–æ–≥–æ –î–µ–¥–∞ –ú–æ—Ä–æ–∑–∞ –≤ –¢–æ—á–∫–µ –∫–∏–ø–µ–Ω–∏—è –£–ª–ì–¢–£!\n\n"
                                                 "–¶–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞: –ù–µ –±–æ–ª—å—à–µ 1000 —Ä—É–±–ª–µ–π.\n\n"
                                                 "–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞.\n\n–û—Ç–≤–µ—á–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, "
                                                 "–≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ –±—É–¥–µ—Ç!\n\n1) –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    else:
        await bot.send_message(msg.from_user.id, "–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.")


@dp.message()
async def get_text_message(msg: Message):
    if msg.from_user.id == mainUserId:
        if msg.text in commands:
            if msg.text == "/info":
                await bot.send_message(mainUserId, str(usersList), parse_mode=ParseMode.HTML)
                return
            if msg.text == "/start_game":
                shuffle_users()
                for i in usersList.getUsers():
                    gift_user = usersList.getUserById(i.getGiftUserId())
                    text = f"{gift_user.getUserLink()} –∂–¥—ë—Ç —Ç–≤–æ–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞!\n\n" \
                           f"üü© –≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç:\n{gift_user.getWant()}\n\n" \
                           f"üü• –≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –Ω–µ —Ö–æ—á–µ—Ç:\n{gift_user.getNotWant()}"
                    await bot.send_message(i.getId(), text, parse_mode=ParseMode.HTML)
                    usersList.getUserById(i.getId()).setState(UserState.inGame)
                await bot.send_message(mainUserId, "–ò–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞", parse_mode=ParseMode.HTML)
                return

    user = usersList.getUserById(msg.from_user.id)
    match user.getState():
        case UserState.setName:
            usersList.getUserById(user.getId()).setRealName(msg.text)
            usersList.getUserById(user.getId()).setState(UserState.setWant)
            await bot.send_message(msg.from_user.id, "2) –ß—Ç–æ –±—ã —Ç–µ–±–µ —Ö–æ—Ç–µ–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫?")
        case UserState.setWant:
            usersList.getUserById(user.getId()).setWant(msg.text)
            usersList.getUserById(user.getId()).setState(UserState.setNotWant)
            await bot.send_message(msg.from_user.id, "3) –ß–µ–≥–æ —Ç—ã —Ç–æ—á–Ω–æ –ù–ï —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫?")
        case UserState.setNotWant:
            usersList.getUserById(user.getId()).setNotWant(msg.text)
            usersList.getUserById(user.getId()).setState(UserState.waiting)
            kb = [
                [types.KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ")],
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
            await bot.send_message(msg.from_user.id, "–û—Ç–ª–∏—á–Ω–æ!\n\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Ç—ã —É–∑–Ω–∞–µ—à—å –∏–º—è —Ç–æ–≥–æ, –∫—Ç–æ –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Ç–≤–æ–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞!", reply_markup=keyboard)
        case UserState.waiting:
            kb = [
                [types.KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ")],
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb)
            await bot.send_message(msg.from_user.id, "–û–∂–∏–¥–∞–Ω–∏–µ –∂–µ—Ä–µ–±—å—ë–≤–∫–∏.", reply_markup=keyboard)
        case _:
            await bot.send_message(msg.from_user.id, "–ò–≥—Ä–∞ –∏–¥—ë—Ç.")
    if msg.text:
        if msg.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ" and user.getState() == UserState.waiting:
            usersList.getUserById(user.getId()).setState(UserState.setName)
            await bot.send_message(msg.from_user.id, "1) –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())

    return


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
